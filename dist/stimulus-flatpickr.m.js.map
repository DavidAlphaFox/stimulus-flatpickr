{"version":3,"file":"stimulus-flatpickr.m.js","sources":["../src/utils.js","../src/config_options.js","../src/events.js","../src/elements.js","../src/strftime_mapping.js","../src/stimulus-flatpickr.js"],"sourcesContent":["export const kebabCase = string =>\n  string\n    .replace(/([a-z])([A-Z])/g, \"$1-$2\")\n    .replace(/\\s+/g, \"-\")\n    .toLowerCase();\n\nexport const capitalize = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n","const booleanOptions = [\n  \"allowInput\",\n  \"altInput\",\n  \"animate\",\n  \"clickOpens\",\n  \"closeOnSelect\",\n  \"disableMobile\",\n  \"enableSeconds\",\n  \"enableTime\",\n  \"inline\",\n  \"noCalendar\",\n  \"shorthandCurrentMonth\",\n  \"static\",\n  \"time_24hr\",\n  \"weekNumbers\",\n  \"wrap\"\n];\n\nconst stringOptions = [\n  \"altFormat\",\n  \"altInputClass\",\n  \"ariaDateFormat\",\n  \"conjunction\",\n  \"dateFormat\",\n  \"defaultDate\",\n  \"mode\",\n  \"nextArrow\",\n  \"position\",\n  \"prevArrow\"\n];\n\nconst numberOptions = [\n  \"defaultHour\",\n  \"defaultMinute\",\n  \"defaultSeconds\",\n  \"hourIncrement\",\n  \"minuteIncrement\",\n  \"showMonths\"\n];\n\nconst arrayOptions = [\"disable\", \"enable\"];\n\nconst dateOptions = [\"maxDate\", \"minDate\", \"maxTime\", \"minTime\", \"now\"];\n\nexport const options = {\n  string: stringOptions,\n  boolean: booleanOptions,\n  date: dateOptions,\n  array: arrayOptions,\n  number: numberOptions\n};\n","export const events = [\n  \"change\",\n  \"open\",\n  \"close\",\n  \"monthChange\",\n  \"yearChange\",\n  \"ready\",\n  \"valueUpdate\",\n  \"dayCreate\"\n];\n","export const elements = [\n  \"input\",\n  \"calendarContainer\",\n  \"prevMonthNav\",\n  \"nextMonthNav\",\n  \"currentMonthElement\",\n  \"currentYearElement\",\n  \"days\"\n];\n","const strftimeRegex = /\\%[a-zA-Z]/;\n\nexport const convertDateFormat = format => {\n  const isStrftime = strftimeRegex.test(format);\n  if (isStrftime) {\n    let newFormat = format;\n    Object.keys(mapping).forEach(token => {\n      newFormat = newFormat.replace(RegExp(token, \"g\"), mapping[token]);\n    });\n    return newFormat;\n  } else {\n    return format;\n  }\n};\n\nconst mapping = {\n  \"%Y\": \"Y\",\n  \"%y\": \"y\",\n  \"%C\": \"Y\",\n  \"%m\": \"m\",\n  \"%-m\": \"n\",\n  \"%_m\": \"n\",\n  \"%B\": \"F\",\n  \"%^B\": \"F\",\n  \"%b\": \"M\",\n  \"%^b\": \"M\",\n  \"%h\": \"M\",\n  \"%^h\": \"M\",\n  \"%d\": \"d\",\n  \"%-d\": \"j\",\n  \"%e\": \"j\",\n  \"%H\": \"H\",\n  \"%k\": \"H\",\n  \"%I\": \"h\",\n  \"%l\": \"h\",\n  \"%P\": \"K\",\n  \"%p\": \"K\",\n  \"%M\": \"i\",\n  \"%S\": \"S\",\n  \"%A\": \"l\",\n  \"%a\": \"D\",\n  \"%w\": \"w\"\n};\n","import { Controller } from \"stimulus\";\nimport flatpickr from \"flatpickr\";\nimport { kebabCase, capitalize } from \"./utils\";\nimport { options } from \"./config_options\";\nimport { events } from \"./events\";\nimport { elements } from \"./elements\";\nimport { convertDateFormat } from \"./strftime_mapping\";\n\nclass Flatpickr extends Controller {\n  initialize() {\n    this.config = {};\n  }\n\n  connect() {\n    this.initializeEvents();\n    this.initializeOptions();\n    this.initializeDateFormats();\n\n    this.fp = flatpickr(this.element, {\n      ...this.config\n    });\n\n    this.initializeElements();\n  }\n\n  disconnect() {\n    this.fp.destroy();\n  }\n\n  initializeEvents() {\n    events.forEach(event => {\n      const hook = `on${capitalize(event)}`;\n      this.config[hook] = this[event].bind(this);\n    });\n  }\n\n  initializeOptions() {\n    Object.keys(options).forEach(optionType => {\n      const optionsCamelCase = options[optionType];\n      optionsCamelCase.forEach(option => {\n        const optionKebab = kebabCase(option);\n        if (this.data.has(optionKebab)) {\n          this.config[option] = this[optionType](optionKebab);\n        }\n      });\n    });\n  }\n\n  initializeDateFormats() {\n    if (this.data.has(\"date-format\")) {\n      this.config.dateFormat = convertDateFormat(this.data.get(\"date-format\"));\n    }\n    if (this.data.has(\"alt-format\")) {\n      this.config.altFormat = convertDateFormat(this.data.get(\"alt-format\"));\n    }\n    if (this.data.has(\"aria-date-format\")) {\n      this.config.ariaDateFormat = convertDateFormat(\n        this.data.get(\"aria-date-format\")\n      );\n    }\n  }\n\n  initializeElements() {\n    elements.forEach(element => {\n      this[`${element}Target`] = this.fp[element];\n    });\n  }\n\n  get altInputTarget() {\n    if (this.element.querySelector(\".flatpickr-input\")) {\n      return this.element.querySelector(\".flatpickr-input\");\n    } else {\n      return this.element;\n    }\n  }\n\n  change() {}\n\n  open() {}\n\n  close() {}\n\n  monthChange() {}\n\n  yearChange() {}\n\n  ready() {}\n\n  valueUpdate() {}\n\n  dayCreate() {}\n\n  string(option) {\n    return this.data.get(option);\n  }\n\n  date(option) {\n    return this.data.get(option);\n  }\n\n  boolean(option) {\n    return this.data.get(option) === \"true\";\n  }\n\n  array(option) {\n    return JSON.parse(this.data.get(option));\n  }\n\n  number(option) {\n    return parseInt(this.data.get(option));\n  }\n}\n\nexport default Flatpickr;\n"],"names":["const","options","string","boolean","date","array","number","events","elements","strftimeRegex","convertDateFormat","format","test","let","newFormat","Object","keys","mapping","forEach","token","replace","RegExp","%Y","%y","%C","%m","%-m","%_m","%B","%^B","%b","%^b","%h","%^h","%d","%-d","%e","%H","%k","%I","%l","%P","%p","%M","%S","%A","%a","%w","initialize","this","config","connect","initializeEvents","initializeOptions","initializeDateFormats","fp","flatpickr","element","initializeElements","disconnect","destroy","event","hook","charAt","toUpperCase","slice","bind","optionType","option","optionKebab","toLowerCase","data","has","dateFormat","get","altFormat","ariaDateFormat","prototypeAccessors","altInputTarget","querySelector","change","open","close","monthChange","yearChange","ready","valueUpdate","dayCreate","JSON","parse","parseInt","Controller"],"mappings":"+DAAOA,IC4CMC,GACXC,QA1BA,YACA,gBACA,iBACA,cACA,aACA,cACA,OACA,YACA,WACA,aAkBAC,SA7CA,aACA,WACA,UACA,aACA,gBACA,gBACA,gBACA,aACA,SACA,aACA,wBACA,SACA,YACA,cACA,QAgCAC,MALmB,UAAW,UAAW,UAAW,UAAW,OAM/DC,OARoB,UAAW,UAS/BC,QAjBA,cACA,gBACA,iBACA,gBACA,kBACA,eCrCWC,GACX,SACA,OACA,QACA,cACA,aACA,QACA,cACA,aCRWC,GACX,QACA,oBACA,eACA,eACA,sBACA,qBACA,QCPIC,EAAgB,aAETC,WAAoBC,GAE/B,GADmBF,EAAcG,KAAKD,GACtB,CACdE,IAAIC,EAAYH,EAIhB,OAHAI,OAAOC,KAAKC,GAASC,iBAAQC,GAC3BL,EAAYA,EAAUM,QAAQC,OAAOF,EAAO,KAAMF,EAAQE,MAErDL,EAEP,OAAOH,GAILM,GACJK,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,8MChCNC,sBACEC,KAAKC,uBAGPC,mBACEF,KAAKG,mBACLH,KAAKI,oBACLJ,KAAKK,wBAELL,KAAKM,GAAKC,EAAUP,KAAKQ,QAAS1C,iBAC7BkC,KAAKC,SAGVD,KAAKS,kCAGPC,sBACEV,KAAKM,GAAGK,uBAGVR,uCACE7C,EAAOW,iBAAQ2C,GACb7D,ILzBoBE,EKyBd4D,EAAO,OLzBO5D,EKyBS2D,GLxBnBE,OAAO,GAAGC,cAAgB9D,EAAO+D,MAAM,IKyBjDhB,EAAKC,OAAOY,GAAQb,EAAKY,GAAOK,KAAKjB,kBAIzCI,wCACEtC,OAAOC,KAAKf,GAASiB,iBAAQiD,GACFlE,EAAQkE,GAChBjD,iBAAQkD,GACvBpE,IAAMqE,EAAwBD,ELtCjChD,QAAQ,kBAAmB,SAC3BA,QAAQ,OAAQ,KAChBkD,cKqCOrB,EAAKsB,KAAKC,IAAIH,KAChBpB,EAAKC,OAAOkB,GAAUnB,EAAKkB,GAAYE,qBAM/Cf,iCACML,KAAKsB,KAAKC,IAAI,iBAChBvB,KAAKC,OAAOuB,WAAa/D,EAAkBuC,KAAKsB,KAAKG,IAAI,iBAEvDzB,KAAKsB,KAAKC,IAAI,gBAChBvB,KAAKC,OAAOyB,UAAYjE,EAAkBuC,KAAKsB,KAAKG,IAAI,gBAEtDzB,KAAKsB,KAAKC,IAAI,sBAChBvB,KAAKC,OAAO0B,eAAiBlE,EAC3BuC,KAAKsB,KAAKG,IAAI,mCAKpBhB,yCACElD,EAASU,iBAAQuC,GACfR,EAAQQ,YAAmBR,EAAKM,GAAGE,MAIvCoB,EAAIC,8BACF,OAAI7B,KAAKQ,QAAQsB,cAAc,oBACtB9B,KAAKQ,QAAQsB,cAAc,oBAE3B9B,KAAKQ,qBAIhBuB,gCAEAC,8BAEAC,+BAEAC,qCAEAC,oCAEAC,+BAEAC,qCAEAC,mCAEArF,gBAAOkE,GACL,OAAOnB,KAAKsB,KAAKG,IAAIN,gBAGvBhE,cAAKgE,GACH,OAAOnB,KAAKsB,KAAKG,IAAIN,gBAGvBjE,iBAAQiE,GACN,MAAiC,SAA1BnB,KAAKsB,KAAKG,IAAIN,gBAGvB/D,eAAM+D,GACJ,OAAOoB,KAAKC,MAAMxC,KAAKsB,KAAKG,IAAIN,iBAGlC9D,gBAAO8D,GACL,OAAOsB,SAASzC,KAAKsB,KAAKG,IAAIN,+CArGVuB"}